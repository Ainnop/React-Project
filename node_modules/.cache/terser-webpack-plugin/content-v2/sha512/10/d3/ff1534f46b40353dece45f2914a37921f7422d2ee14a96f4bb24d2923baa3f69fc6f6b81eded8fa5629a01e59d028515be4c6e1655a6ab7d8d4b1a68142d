{"map":"{\"version\":3,\"sources\":[\"/Users/ainnop/githubproject/src/Person/Person.js\",\"/Users/ainnop/githubproject/src/App.js\",\"/Users/ainnop/githubproject/src/serviceWorker.js\",\"/Users/ainnop/githubproject/src/index.js\"],\"names\":[\"person\",\"props\",\"react_default\",\"a\",\"createElement\",\"name\",\"age\",\"children\",\"App\",\"state\",\"persons\",\"otherState\",\"switchNameHandler\",\"_this\",\"setState\",\"className\",\"Person\",\"this\",\"onClick\",\"Component\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"src_App_0\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"then\",\"registration\",\"unregister\"],\"mappings\":\"yNAWeA,SAVA,SAACC,GACZ,OACIC,EAAAC,EAAAC,cAAA,MAAA,KAEIF,EAAAC,EAAAC,cAAA,IAAA,KAAA,OAAQH,EAAMI,KAAd,aAA8BJ,EAAMK,IAApC,QACAJ,EAAAC,EAAAC,cAAA,IAAA,KAAIH,EAAMM,aCiCPC,6MAjCbC,MAAQ,CACNC,QAAS,CACP,CAACL,KAAM,QAASC,IAAK,IACrB,CAACD,KAAM,QAASC,IAAK,IACrB,CAACD,KAAM,UAAWC,IAAK,KAEzBK,WAAY,sBAGdC,kBAAoB,WAElBC,EAAKC,SAAS,CAACJ,QAAS,CACtB,CAACL,KAAM,aAAcC,IAAK,IAC1B,CAACD,KAAM,QAASC,IAAK,IACrB,CAACD,KAAM,UAAWC,IAAK,gFAIzB,OACEJ,EAAAC,EAAAC,cAAA,MAAA,CAAKW,UAAU,OACbb,EAAAC,EAAAC,cAAA,KAAA,KAAA,oBACAF,EAAAC,EAAAC,cAACY,EAAD,CAAQX,KAAMY,KAAKR,MAAMC,QAAQ,GAAGL,KAAMC,IAAKW,KAAKR,MAAMC,QAAQ,GAAGJ,MACrEJ,EAAAC,EAAAC,cAAA,SAAA,CAAQc,QAASD,KAAKL,mBAAtB,eACAV,EAAAC,EAAAC,cAAA,IAAA,CAAGW,UAAU,aAAb,2DAzBUI,EAAAA,WCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,EAAAA,EAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC\",\"sourcesContent\":[\"import React from 'react';\\nconst person = (props) =>{\\n    return (\\n        <div>\\n\\n            <p>I'm {props.name} and I am {props.age} old</p>\\n            <p>{props.children}</p>\\n        </div>\\n    )\\n}\\n\\nexport default person;\",\"import React, { Component } from 'react';\\nimport './App.css';\\nimport Person from './Person/Person';\\n\\nclass App extends Component {\\n\\n  state = {\\n    persons: [\\n      {name: 'James', age: 29},\\n      {name: 'Atwau', age: 21},\\n      {name: 'Arereng', age: 12}\\n    ],\\n    otherState: 'Some other value'\\n  }\\n\\n  switchNameHandler = () =>{\\n    //console.log('Was Clicked');\\n    this.setState({persons: [\\n      {name: 'Polo Atwau', age: 29},\\n      {name: 'Atwau', age: 21},\\n      {name: 'Arereng', age: 12}\\n    ]})\\n  }\\n  render() {\\n    return (\\n      <div className=\\\"App\\\">\\n        <h1>Atwau is calling</h1>\\n        <Person name={this.state.persons[0].name} age={this.state.persons[0].age}/>\\n        <button onClick={this.switchNameHandler}>Switch Name</button>\\n        <p className=\\\"App-intro\\\">\\n          My name is Arereng Jemimah. Welcome, and hello!\\n        </p>\\n      </div>\\n    );\\n\\n    //return React.createElement('div', {className: 'App'}, React.createElement('h1', null, 'This is atwau calling'));\\n  }\\n}\\n\\nexport default App;\\n\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read http://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport './index.css';\\nimport App from './App';\\nimport * as serviceWorker from './serviceWorker';\\n\\nReactDOM.render(<App />, document.getElementById('root'));\\n\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{14:function(e,n,a){},15:function(e,n,a){},16:function(e,n,a){\"use strict\";a.r(n);var t=a(0),r=a.n(t),o=a(2),c=a.n(o),l=(a(14),a(3)),i=a(4),s=a(6),m=a(5),u=a(7),h=(a(15),function(e){return r.a.createElement(\"div\",null,r.a.createElement(\"p\",null,\"I'm \",e.name,\" and I am \",e.age,\" old\"),r.a.createElement(\"p\",null,e.children))}),p=function(e){function n(){var e,a;Object(l.a)(this,n);for(var t=arguments.length,r=new Array(t),o=0;o<t;o++)r[o]=arguments[o];return(a=Object(s.a)(this,(e=Object(m.a)(n)).call.apply(e,[this].concat(r)))).state={persons:[{name:\"James\",age:29},{name:\"Atwau\",age:21},{name:\"Arereng\",age:12}],otherState:\"Some other value\"},a.switchNameHandler=function(){a.setState({persons:[{name:\"Polo Atwau\",age:29},{name:\"Atwau\",age:21},{name:\"Arereng\",age:12}]})},a}return Object(u.a)(n,e),Object(i.a)(n,[{key:\"render\",value:function(){return r.a.createElement(\"div\",{className:\"App\"},r.a.createElement(\"h1\",null,\"Atwau is calling\"),r.a.createElement(h,{name:this.state.persons[0].name,age:this.state.persons[0].age}),r.a.createElement(\"button\",{onClick:this.switchNameHandler},\"Switch Name\"),r.a.createElement(\"p\",{className:\"App-intro\"},\"My name is Arereng Jemimah. Welcome, and hello!\"))}}]),n}(t.Component);Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));c.a.render(r.a.createElement(p,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})},8:function(e,n,a){e.exports=a(16)}},[[8,1,2]]]);","extractedComments":[]}